
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';

import { auth } from 'firebase/app';
import { AngularFireAuth } from '@angular/fire/auth';
import {
  AngularFirestore,
  AngularFirestoreDocument
} from '@angular/fire/firestore';

import { Observable, of } from 'rxjs';
import { switchMap, delay } from 'rxjs/operators';
import { User } from './user.model';
import { FirebaseApp, } from '@angular/fire';

@Injectable({ providedIn: 'root' })
export class AuthService {
  user$: Observable<any>; //holds user data
  u : boolean; //holds if user exists.
  WL1; //holds the watchlist of the users.
  constructor(
    private afAuth: AngularFireAuth,
    private afs: AngularFirestore,
    private router: Router,
    private FirebaseApp: FirebaseApp,
  ) {
    this.user$ = this.afAuth.authState.pipe(
      switchMap(user => {
        if (user) {
          return this.afs.doc<User>(`users/${user.uid}`).valueChanges();
        } else {
          return of(null);
        }
      })
    );

  }

  /**
   * Used to check database if user is a user. 
   * @param email Matches emails to current emails in database.
   */
  getUser(email) {
    this.afs.collection('users', ref => ref.where(`email`, "==", email))
      .snapshotChanges().subscribe(res => {
        if (res.length > 0) {
          res.forEach(e => {
            let id = e.payload.doc.id;
            this.afs.collection("users").doc(id).collection('watchlist').valueChanges().subscribe(x => {
              this.WL1 = x;
            });
          });
        }
        else {
          this.WL1 = null;
        }
      });
  }
  /**
   * Each user logged in will have a "watchlist". This calls the DB and returns all values
   * aka movie IDS.
   * @param uid unique for each user, generated by auth for google and firebase.
   */
  getWatchlist(uid) {
    return this.afs.collection("users").doc(`${uid}`).collection('watchlist').valueChanges();
  }

  /**
   * This is checking if the movie (when you're on the movie page) is in your watchlist
   * @param movieID Current movie on the page
   * @param uid unique for each user, generated by auth for google and firebase.
   */
  isInWatchlist(movieID, uid) {
    this.afs.collection('users').doc(`${uid}`).collection(`watchlist`, ref => ref.where(`id`, "==", movieID))
      .snapshotChanges().subscribe(res => {
         (res.length > 0) ? this.u = true : this.u = false;
      });
  }
  /**
   * Adds the specific movie into users watchlist.
   * @param movieId specific ID of the movie.
   * @param data specific data for the movie to hold in DB.
   */
  async addToWatchlist(movieId, data) {
    const credential = await this.afAuth.auth.currentUser;
    return this.afs.collection("users").doc(`${credential.uid}`).collection("watchlist").doc(`${movieId}`).set(
      {
        adult: data.adult,
        budget: data.budget,
        id: movieId,
        original_title: data.original_title,
        popularity: data.popularity,
        release_date: data.release_date,
        revenue: data.revenue,
        title: data.title,
        vote_average: data.vote_average,
        vote_count: data.vote_count,
        poster_path: data.poster_path
      }
    );
  }

  /**
   * Deletes from watchlist of user.
   * @param movieId 
   */
  async deleteFromWatchlist(movieId) {
    const credential = await this.afAuth.auth.currentUser;
    return this.afs.collection("users").doc(`${credential.uid}`).collection("watchlist").doc(`${movieId}`).delete();
  }

  /**
   * Using firebases auth, signs in from popup google.
   */
  async googleSignin() {
    const provider = new auth.GoogleAuthProvider();
    const credential = await this.afAuth.auth.signInWithPopup(provider);
    return this.updateUserData(credential.user);
  }

   /**
   * Using firebases auth, signs out from popup google.
   */
  async signOut() {
    await this.afAuth.auth.signOut();
    return this.router.navigate(['/']);
  }
  
  /**
   * User info gathering.
   */
  private updateUserData(user) {
    // Sets user data to firestore on login
    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);

    const data = {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      photoURL: user.photoURL,
    }

    return userRef.set(data, { merge: true });

  }

}